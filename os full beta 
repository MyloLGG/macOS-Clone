import { Kernel } from './core/kernel.js';
import { Display } from './components/display.js';

const display = new Display();
const kernel = new Kernel(display);

display.showWelcome();
kernel.start();export class Kernel {
    constructor(display) {
        this.display = display;
        this.commands = {
            help: this.help.bind(this),
            echo: this.echo.bind(this),
            time: this.time.bind(this),
            clear: this.clear.bind(this),
        };
    }

    start() {
        this.display.print('Type "help" for a list of commands.');
        this.listen();
    }

    listen() {
        const input = window.prompt('isak@os:~$');
        if (input !== null) {
            this.handleCommand(input.trim());
            this.listen();
        }
    }

    handleCommand(input) {
        const [cmd, ...args] = input.split(' ');
        if (this.commands[cmd]) {
            this.commands[cmd](args);
        } else {
            this.display.print(`Command not found: ${cmd}`);
        }
    }

    help() {
        this.display.print('Available commands: help, echo, time, clear');
    }

    echo(args) {
        this.display.print(args.join(' '));
    }

    time() {
        this.display.print(new Date().toString());
    }

    clear() {
        this.display.clear();
    }
}export class Kernel {
    constructor(display) {
        this.display = display;
        this.commands = {
            help: this.help.bind(this),
            echo: this.echo.bind(this),
            time: this.time.bind(this),
            clear: this.clear.bind(this),
        };
    }

    start() {
        this.display.print('Type "help" for a list of commands.');
        this.listen();
    }

    listen() {
        const input = window.prompt('isak@os:~$');
        if (input !== null) {
            this.handleCommand(input.trim());
            this.listen();
        }
    }

    handleCommand(input) {
        const [cmd, ...args] = input.split(' ');
        if (this.commands[cmd]) {
            this.commands[cmd](args);
        } else {
            this.display.print(`Command not found: ${cmd}`);
        }
    }

    help() {
        this.display.print('Available commands: help, echo, time, clear');
    }

    echo(args) {
        this.display.print(args.join(' '));
    }

    time() {
        this.display.print(new Date().toString());
    }

    clear() {
        this.display.clear();
    }
}export class Display {
    showWelcome() {
        this.print('Welcome to Isak OS Simulator!');
    }

    print(message) {
        console.log(message);
    }

    clear() {
        console.clear();
    }
}export class Settings {
    constructor() {
        this.data = {
            username: 'isak',
            theme: 'light',
        };
    }

    set(key, value) {
        if (key in this.data) {
            this.data[key] = value;
            return `Setting "${key}" updated to "${value}".`;
        }
        return `Unknown setting: "${key}".`;
    }

    get(key) {
        if (key in this.data) {
            return `${key}: ${this.data[key]}`;
        }
        return `Unknown setting: "${key}".`;
    }

    list() {
        return Object.entries(this.data)
            .map(([key, value]) => `${key}: ${value}`)
            .join('\n');
    }
}import { Settings } from '../components/settings.js';
// ...existing code...
export class Kernel {
    constructor(display) {
        this.display = display;
        this.settings = new Settings();
        this.commands = {
            // ...existing commands...
            settings: this.settingsCmd.bind(this),
        };
    }

    // ...existing code...

    settingsCmd(args) {
        if (args.length === 0) {
            this.display.print(this.settings.list());
        } else if (args[0] === 'set' && args.length === 3) {
            this.display.print(this.settings.set(args[1], args[2]));
        } else if (args[0] === 'get' && args.length === 2) {
            this.display.print(this.settings.get(args[1]));
        } else {
            this.display.print('Usage: settings [get <key> | set <key> <value>]');
        }
    }
}export class Messages {
    constructor() {
        this.list = [];
    }

    send(message) {
        if (message) {
            this.list.push(message);
            return `Message sent: "${message}"`;
        }
        return 'Cannot send empty message.';
    }

    show() {
        if (this.list.length === 0) {
            return 'No messages.';
        }
        return this.list.map((msg, idx) => `${idx + 1}: ${msg}`).join('\n');
    }

    clear() {
        this.list = [];
        return 'All messages cleared.';
    }
}import { Messages } from '../components/messages.js';
// ...existing code...
export class Kernel {
    constructor(display) {
        this.display = display;
        this.settings = new Settings();
        this.messages = new Messages();
        this.commands = {
            // ...existing commands...
            messages: this.messagesCmd.bind(this),
        };
    }

    // ...existing code...

    messagesCmd(args) {
        if (args.length === 0 || args[0] === 'show') {
            this.display.print(this.messages.show());
        } else if (args[0] === 'send' && args.length > 1) {
            this.display.print(this.messages.send(args.slice(1).join(' ')));
        } else if (args[0] === 'clear') {
            this.display.print(this.messages.clear());
        } else {
            this.display.print('Usage: messages [show | send <message> | clear]');
        }
    }
}export class Finder {
    constructor() {
        this.files = {};
    }

    logo() {
        return `
 _____ 
|  _  |
| |_| |
|  _  |
|_| |_|
   i
Isak Finder
`;
    }

    list() {
        const fileNames = Object.keys(this.files);
        if (fileNames.length === 0) return 'No files found.';
        return 'Files:\n' + fileNames.join('\n');
    }

    create(name, content = '') {
        if (!name) return 'File name required.';
        if (this.files[name]) return 'File already exists.';
        this.files[name] = content;
        return `File "${name}" created.`;
    }

    delete(name) {
        if (!this.files[name]) return 'File not found.';
        delete this.files[name];
        return `File "${name}" deleted.`;
    }

    read(name) {
        if (!this.files[name]) return 'File not found.';
        return `Content of "${name}":\n${this.files[name]}`;
    }
}import { Finder } from '../components/finder.js';
// ...existing code...
export class Kernel {
    constructor(display) {
        this.display = display;
        this.settings = new Settings();
        this.messages = new Messages();
        this.finder = new Finder();
        this.commands = {
            // ...existing commands...
            finder: this.finderCmd.bind(this),
        };
    }

    // ...existing code...

    finderCmd(args) {
        if (args.length === 0 || args[0] === 'logo') {
            this.display.print(this.finder.logo());
        } else if (args[0] === 'list') {
            this.display.print(this.finder.list());
        } else if (args[0] === 'create' && args.length > 1) {
            this.display.print(this.finder.create(args[1], args.slice(2).join(' ')));
        } else if (args[0] === 'delete' && args.length > 1) {
            this.display.print(this.finder.delete(args[1]));
        } else if (args[0] === 'read' && args.length > 1) {
            this.display.print(this.finder.read(args[1]));
        } else {
            this.display.print('Usage: finder [logo | list | create <name> [content] | read <name> | delete <name>]');
        }
    }
}<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Isak OS File Downloader</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .logo { font-size: 48px; font-weight: bold; color: #333; }
        .container { max-width: 400px; margin: auto; }
        textarea { width: 100%; height: 100px; }
        input[type="text"] { width: 100%; }
        button { margin-top: 10px; padding: 8px 16px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">i</div>
        <h2>Isak OS File Downloader</h2>
        <input type="text" id="filename" placeholder="Enter file name (e.g. notes.txt)" />
        <textarea id="filecontent" placeholder="Enter file content"></textarea>
        <button onclick="downloadFile()">Download File</button>
    </div>
    <script>
        function downloadFile() {
            const filename = document.getElementById('filename').value || 'untitled.txt';
            const content = document.getElementById('filecontent').value;
            const blob = new Blob([content], { type: 'text/plain' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            link.click();
            URL.revokeObjectURL(link.href);
        }
    </script>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Isak OS YouTube Player</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .logo { font-size: 48px; font-weight: bold; color: #c4302b; }
        .container { max-width: 500px; margin: auto; }
        input[type="text"] { width: 100%; margin-bottom: 10px; }
        button { padding: 8px 16px; }
        iframe { width: 100%; height: 315px; border: none; margin-top: 20px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">i</div>
        <h2>Isak OS YouTube Player</h2>
        <input type="text" id="yturl" placeholder="Enter YouTube URL or Video ID" />
        <button onclick="loadVideo()">Load Video</button>
        <div id="player"></div>
    </div>
    <script>
        function extractVideoId(url) {
            // Handles full URLs and direct IDs
            const regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
            const match = url.match(regExp);
            if (match && match[2].length === 11) {
                return match[2];
            }
            // If not a URL, assume it's a video ID
            if (url.length === 11) return url;
            return null;
        }

        function loadVideo() {
            const input = document.getElementById('yturl').value.trim();
            const videoId = extractVideoId(input);
            const playerDiv = document.getElementById('player');
            if (videoId) {
                playerDiv.innerHTML = `<iframe src="https://www.youtube.com/embed/${videoId}" allowfullscreen></iframe>`;
            } else {
                playerDiv.innerHTML = '<p style="color:red;">Invalid YouTube URL or Video ID.</p>';
            }
        }
    </script>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Isak OS YouTube Player</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .logo { font-size: 48px; font-weight: bold; color: #c4302b; }
        .container { max-width: 500px; margin: auto; }
        input[type="text"] { width: 100%; margin-bottom: 10px; }
        button { padding: 8px 16px; }
        iframe { width: 100%; height: 315px; border: none; margin-top: 20px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">i</div>
        <h2>Isak OS YouTube Player</h2>
        <input type="text" id="yturl" placeholder="Enter YouTube URL or Video ID" />
        <button onclick="loadVideo()">Load Video</button>
        <div id="player"></div>
    </div>
    <script>
        function extractVideoId(url) {
            // Handles full URLs and direct IDs
            const regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
            const match = url.match(regExp);
            if (match && match[2].length === 11) {
                return match[2];
            }
            // If not a URL, assume it's a video ID
            if (url.length === 11) return url;
            return null;
        }

        function loadVideo() {
            const input = document.getElementById('yturl').value.trim();
            const videoId = extractVideoId(input);
            const playerDiv = document.getElementById('player');
            if (videoId) {
                playerDiv.innerHTML = `<iframe src="https://www.youtube.com/embed/${videoId}" allowfullscreen></iframe>`;
            } else {
                playerDiv.innerHTML = '<p style="color:red;">Invalid YouTube URL or Video ID.</p>';
            }
        }
    </script>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Isak Intelligence AI</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .logo { font-size: 48px; font-weight: bold; color: #333; }
        .container { max-width: 500px; margin: auto; }
        #chat { border: 1px solid #ccc; padding: 10px; height: 300px; overflow-y: auto; margin-bottom: 10px; background: #fafafa; }
        #userinput { width: 80%; }
        button { padding: 8px 16px; }
        .user { color: #0074d9; }
        .ai { color: #2ecc40; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">i</div>
        <h2>Isak Intelligence AI</h2>
        <div id="chat"></div>
        <input type="text" id="userinput" placeholder="Ask something..." />
        <button onclick="sendMessage()">Send</button>
    </div>
    <script>
        const chat = document.getElementById('chat');

        function aiReply(message) {
            message = message.toLowerCase();
            if (message.includes('hello') || message.includes('hi')) {
                return "Hello! I'm Isak Intelligence. How can I help you?";
            }
            if (message.includes('name')) {
                return "My name is Isak Intelligence.";
            }
            if (message.includes('time')) {
                return "The current time is: " + new Date().toLocaleTimeString();
            }
            if (message.includes('date')) {
                return "Today's date is: " + new Date().toLocaleDateString();
            }
            if (message.includes('help')) {
                return "You can ask me about the time, date, or my name!";
            }
            return "I'm Isak Intelligence. Ask me anything!";
        }

        function sendMessage() {
            const input = document.getElementById('userinput');
            const userMsg = input.value.trim();
            if (!userMsg) return;
            chat.innerHTML += `<div class="user"><b>You:</b> ${userMsg}</div>`;
            const reply = aiReply(userMsg);
            chat.innerHTML += `<div class="ai"><b>Isak:</b> ${reply}</div>`;
            chat.scrollTop = chat.scrollHeight;
            input.value = '';
        }
    </script>
</body>
</html>// ...existing imports...
export class Kernel {
    constructor(display) {
        this.display = display;
        this.settings = new Settings();
        this.messages = new Messages();
        this.finder = new Finder();
        this.clipboard = ''; // Add clipboard
        this.commands = {
            // ...existing commands...
            x: this.copyCmd.bind(this), // Command X for copy
            v: this.pasteCmd.bind(this), // Command V for paste
        };
    }

    // ...existing code...

    copyCmd(args) {
        if (args.length === 0) {
            this.display.print('Usage: x <text to copy>');
        } else {
            this.clipboard = args.join(' ');
            this.display.print(`Copied: "${this.clipboard}"`);
        }
    }

    pasteCmd() {
        if (this.clipboard) {
            this.display.print(`Pasted: "${this.clipboard}"`);
        } else {
            this.display.print('Clipboard is empty.');
        }
    }
}